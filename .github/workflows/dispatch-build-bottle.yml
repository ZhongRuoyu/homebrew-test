name: Dispatch build bottle (for chosen OS versions)

run-name: Build bottle of ${{ inputs.formula }} on ${{ inputs.runner }}

on:
  workflow_dispatch:
    inputs:
      runner:
        description: Build runner(s)
        required: true
      formula:
        description: Formula name
        required: true
      timeout:
        description: "Build timeout (in minutes, default: 60 minutes)"
        type: number
        default: 60
        required: false
      issue:
        description: Issue number, where comment on failure would be posted
        type: number
        required: false
      upload:
        description: "Upload built bottles? (default: false)"
        type: boolean
        default: false
        required: false

env:
  HOMEBREW_DEVELOPER: 1
  HOMEBREW_GITHUB_ACTIONS: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_FROM_API: 1
  HOMEBREW_NO_BUILD_ERROR_ISSUES: 1
  HOMEBREW_ARM64_TESTING: 1
  RUN_URL: ${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}
  DISPATCH_BUILD_BOTTLE_SENDER: ${{ github.event.sender.login }}
  DISPATCH_BUILD_BOTTLE_FORMULA: ${{ inputs.formula }}
  DISPATCH_BUILD_BOTTLE_RUNNER: ${{ inputs.runner }}
  DISPATCH_BUILD_BOTTLE_TIMEOUT: ${{ inputs.timeout }}
  DISPATCH_BUILD_BOTTLE_ISSUE: ${{ inputs.issue }}
  DISPATCH_BUILD_BOTTLE_UPLOAD: ${{ inputs.upload }}

defaults:
  run:
    shell: bash -xeuo pipefail {0}

# Intentionally the same as dispatch-rebottle
concurrency: bottle-${{ inputs.formula }}

permissions:
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/homebrew/ubuntu22.04:main
    outputs:
      runners: ${{ steps.runner-matrix.outputs.result }}
    steps:
      - name: Print details for dispatch job
        run: |
          echo sender="${DISPATCH_BUILD_BOTTLE_SENDER}"
          echo formula="${DISPATCH_BUILD_BOTTLE_FORMULA}"
          echo runner="${DISPATCH_BUILD_BOTTLE_RUNNER}"
          echo timeout="${DISPATCH_BUILD_BOTTLE_TIMEOUT}"
          echo issue="${DISPATCH_BUILD_BOTTLE_ISSUE}"
          echo upload="${DISPATCH_BUILD_BOTTLE_UPLOAD}"

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@main
        with:
          core: true
          cask: false
          test-bot: false

      - name: Prepare runner matrix
        id: runner-matrix
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const macOSRegex = /^macos-/;
            const linuxRegex = /^ubuntu-/;
            return context.payload.inputs.runner.split(",")
                                                .map(s => s.trim())
                                                .filter(Boolean)
                                                .map(s => {
              if (macOSRegex.test(s)) {
                return {runner: s, cleanup: true};
              } else if (linuxRegex.test(s)) {
                return {
                  runner:    s,
                  container: {
                    image:   "ghcr.io/homebrew/ubuntu22.04:main",
                    options: "--user=linuxbrew"
                  },
                  workdir:   "/github/home",
                  cleanup:   false
                };
              }
            });

      - name: Ensure tap is up-to-date
        if: endsWith(github.ref, 'main') || endsWith(github.ref, 'master')
        run: brew update

      - name: Check for existing bottle
        shell: brew ruby {0}
        env:
          HOMEBREW_RUNNER_MATRIX: ${{ steps.runner-matrix.outputs.result }}
          HOMEBREW_DISPATCHED_FORMULA: ${{ inputs.formula }}
        run: |
          matrix = JSON.parse(ENV.fetch("HOMEBREW_RUNNER_MATRIX"))
          formula_name = ENV.fetch("HOMEBREW_DISPATCHED_FORMULA")
          formula = Formulary.factory(formula_name)

          bottled_tags = matrix.filter_map do |entry|
            runner = entry.fetch("runner")

            bottle_tag = if runner.start_with?("ubuntu-") && runner.end_with?("-arm")
              Utils::Bottles.tag(:arm64_linux)
            elsif runner.start_with?("ubuntu-")
              Utils::Bottles.tag(:x86_64_linux)
            elsif runner.start_with?("macos-")
              _, os_version, _ = *runner.split("-")
              system = MacOSVersion.new(os_version).to_sym
              arch = os_version.to_i >= 14 ? :arm64 : :x86_64
              Utils::Bottles::Tag.new(system:, arch:)
            end
            next if bottle_tag.blank?

            bottled_on_current_runner = formula.bottle_specification.tag?(bottle_tag, no_older_versions: true)
            next unless bottled_on_current_runner

            bottle_tag
          end

          unless bottled_tags.empty?
            puts GitHub::Actions::Annotation.new(
              :error,
              "#{formula_name} already has a bottle for #{bottled_tags.to_sentence}!",
            )
            exit 1
          end

  bottle:
    needs: prepare
    strategy:
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.runners) }}
    name: Build bottle on ${{ matrix.runner }}
    runs-on: ${{ matrix.runner }}
    container: ${{ matrix.container }}
    timeout-minutes: ${{ fromJson(inputs.timeout) }}
    permissions:
      actions: read
      checks: read
      contents: read
      packages: read
      pull-requests: read
    defaults:
      run:
        shell: /bin/bash -xeuo pipefail {0}
        working-directory: ${{ matrix.workdir || github.workspace }}
    env:
      HOMEBREW_GITHUB_API_TOKEN: ${{ github.token }}
      BOTTLES_DIR: ${{ matrix.workdir || github.workspace }}/bottles
    steps:
      - name: Pre-test steps
        uses: Homebrew/actions/pre-build@main
        with:
          bottles-directory: ${{ env.BOTTLES_DIR }}
          cleanup: ${{ matrix.cleanup }}

      - name: Run brew test-bot
        working-directory: ${{ env.BOTTLES_DIR }}
        run: |
          HOMEBREW_DOCKER_REGISTRY_TOKEN=$(echo -n "${TOKEN}" | base64 | tr -d '\n')
          echo "::add-mask::${HOMEBREW_DOCKER_REGISTRY_TOKEN}"
          export HOMEBREW_DOCKER_REGISTRY_TOKEN
          brew test-bot \
            --only-formulae \
            --root-url="https://ghcr.io/v2/zhongruoyu/zhongruoyu-homebrew-test" \
            --keep-old \
            --only-json-tab \
            --skip-online-checks \
            --skip-dependents \
            "${DISPATCH_BUILD_BOTTLE_FORMULA}"
        env:
          TOKEN: ${{ github.token }}

      - name: Post-build steps
        if: always()
        uses: Homebrew/actions/post-build@main
        with:
          runner: ${{ matrix.runner }}
          cleanup: ${{ matrix.cleanup }}
          bottles-directory: ${{ env.BOTTLES_DIR }}
          logs-directory: ${{ env.BOTTLES_DIR }}/logs

  upload:
    permissions:
      actions: read
      checks: read
      contents: write
      issues: read
      packages: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs: bottle
    if: inputs.upload
    container:
      image: ghcr.io/homebrew/ubuntu22.04:main
    env:
      HOMEBREW_SIMULATE_MACOS_ON_LINUX: 1
      GH_REPO: ${{ github.repository }}
      GH_NO_UPDATE_NOTIFIER: 1
      GH_PROMPT_DISABLED: 1
      BOTTLE_BRANCH: ${{ github.actor }}/dispatch/${{ inputs.formula }}/${{ github.run_id }}
      BOTTLES_DIR: ${{ github.workspace }}/bottles
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@main
        with:
          core: true
          cask: false
          test-bot: false

      - name: Download bottles from GitHub Actions
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: bottles_*
          path: ${{ env.BOTTLES_DIR }}
          merge-multiple: true

      - name: Configure Git user
        uses: Homebrew/actions/git-user-config@main
        with:
          username: ${{ github.actor }}

      - name: Checkout branch for bottle commit
        working-directory: ${{ steps.set-up-homebrew.outputs.repository-path }}
        run: git checkout -b "$BOTTLE_BRANCH" origin/HEAD

      - name: Upload bottles to GitHub Packages
        id: upload
        env:
          HOMEBREW_GITHUB_PACKAGES_USER: ${{ github.repository_owner }}
          HOMEBREW_GITHUB_PACKAGES_TOKEN: ${{ github.token }}
          HOMEBREW_TAP_PATH: ${{ steps.set-up-homebrew.outputs.repository-path }}
        working-directory: ${{ env.BOTTLES_DIR }}
        run: |
          brew pr-upload \
            --verbose \
            --keep-old \
            --root-url="https://ghcr.io/v2/zhongruoyu/zhongruoyu-homebrew-test"
          echo "title=$(git -C "$HOMEBREW_TAP_PATH" log -1 --format='%s' "$BOTTLE_BRANCH")" >> "$GITHUB_OUTPUT"
          echo "head_sha=$(git -C "$HOMEBREW_TAP_PATH" rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Push commits
        uses: Homebrew/actions/git-try-push@main
        with:
          token: ${{ github.token }}
          directory: ${{ steps.set-up-homebrew.outputs.repository-path }}
          branch: ${{ env.BOTTLE_BRANCH }}

      - name: Open PR with bottle commit
        id: create-pr
        uses: Homebrew/actions/create-pull-request@main
        with:
          token: ${{ github.token }}
          base: ${{ github.ref }}
          head: ${{ env.BOTTLE_BRANCH }}
          title: ${{ steps.upload.outputs.title }}
          body: Created by [`brew dispatch-build-bottle`](${{ env.RUN_URL }})
          reviewers: ${{ github.actor }}

      - name: Merge PR
        working-directory: ${{ steps.set-up-homebrew.outputs.repository-path }}
        env:
          GH_TOKEN: ${{ github.token }}
          EXPECTED_SHA: ${{ steps.upload.outputs.head_sha }}
          PR: ${{ steps.create-pr.outputs.number }}
        run: |
          gh pr merge \
            --delete-branch \
            --match-head-commit="$EXPECTED_SHA" \
            --merge \
            "$PR"

  comment:
    permissions:
      issues: write
      pull-requests: write
    needs: [bottle, upload]
    if: failure() && inputs.issue > 0
    runs-on: ubuntu-latest
    steps:
      - name: Post comment on failure
        uses: Homebrew/actions/post-comment@main
        with:
          token: ${{ github.token }}
          issue: ${{ inputs.issue }}
          body: ":x: @${{ github.actor }} bottle request for ${{ inputs.formula }} [failed](${{ env.RUN_URL }})."
          bot_body: ":x: Bottle request for ${{ inputs.formula }} [failed](${{ env.RUN_URL }})."
          bot: github-actions[bot]
