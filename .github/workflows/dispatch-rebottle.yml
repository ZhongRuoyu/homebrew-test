name: Dispatch rebottle (for all currently bottled OS versions)

run-name: Rebuild bottles of ${{ inputs.formula }}

on:
  workflow_dispatch:
    inputs:
      formula:
        description: Formula name
        required: true
      reason:
        description: Reason for rebottling
        required: true
      timeout:
        description: "Build timeout (in minutes, default: 60 minutes)"
        type: number
        default: 60
        required: false
      issue:
        description: Issue number, where comment on failure would be posted
        type: number
        required: false
      upload:
        description: "Upload built bottles? (default: false)"
        type: boolean
        default: false
        required: false
      fail-fast:
        description: "Fail immediately on a single OS version failure? (default: true)"
        type: boolean
        default: true
        required: false

defaults:
  run:
    shell: bash -xeuo pipefail {0}

# Intentionally the same as dispatch-build-bottle
concurrency: bottle-${{ inputs.formula }}

permissions:
  contents: read

env:
  HOMEBREW_DEVELOPER: 1
  HOMEBREW_GITHUB_ACTIONS: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_FROM_API: 1
  HOMEBREW_NO_BUILD_ERROR_ISSUES: 1
  HOMEBREW_ARM64_TESTING: 1
  RUN_URL: ${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}
  DISPATCH_REBOTTLE_SENDER: ${{ github.event.sender.login }}
  DISPATCH_REBOTTLE_FORMULA: ${{ inputs.formula }}
  DISPATCH_REBOTTLE_TIMEOUT: ${{ inputs.timeout }}
  DISPATCH_REBOTTLE_ISSUE: ${{ inputs.issue }}
  DISPATCH_REBOTTLE_UPLOAD: ${{ inputs.upload }}
  DISPATCH_REBOTTLE_REASON: ${{ inputs.reason }}

jobs:
  prepare:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/homebrew/ubuntu22.04:main
    outputs:
      runners: ${{ steps.determine-runners.outputs.runners }}
    steps:
      - name: Print details for dispatch job
        run: |
          echo sender="${DISPATCH_REBOTTLE_SENDER}"
          echo formula="${DISPATCH_REBOTTLE_FORMULA}"
          echo runner="${DISPATCH_REBOTTLE_RUNNER}"
          echo timeout="${DISPATCH_REBOTTLE_TIMEOUT}"
          echo issue="${DISPATCH_REBOTTLE_ISSUE}"
          echo upload="${DISPATCH_REBOTTLE_UPLOAD}"

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@main
        with:
          core: true
          cask: false
          test-bot: false

      - name: Determine runners
        id: determine-runners
        shell: brew ruby {0}
        run: |
          RUNNERS = {
            [:tahoe, :arm64]    => "macos-26",
            [:sequoia, :arm64]  => "macos-15",
            [:sonoma, :arm64]   => "macos-14",
            [:ventura, :x86_64] => "macos-13",
            [:linux, :x86_64]   => "ubuntu-latest",
            [:linux, :arm64]    => "ubuntu-24.04-arm",
          }.freeze

          def runner_spec(system, arch)
            runner = RUNNERS[[system, arch]]
            return unless runner

            if system == :linux
              {
                runner:    runner,
                container: {
                  image:   "ghcr.io/homebrew/ubuntu22.04:main",
                  options: "--user=linuxbrew",
                },
                workdir:   "/github/home",
                cleanup:   false,
              }
            else
              {
                runner:  runner,
                cleanup: true,
              }
            end
          end

          formula_name = ENV.fetch("DISPATCH_REBOTTLE_FORMULA")
          formula = Formulary.factory(formula_name)

          tags = formula.bottle_specification.collector.tags
          runners = if tags.one? && tags.first.system == :all
            [
              runner_spec([:linux, :x86_64]),
              runner_spec([:linux, :arm64]),
              *MacOSVersion::SYMBOLS.keys.flat_map do |system|
                [runner_spec(system), runner_spec(system, :arm64)]
              end.compact,
            ]
          else
            tags.filter_map do |tag|
              if tag.system == :all
                nil
              else
                runner_spec(tag.system, tag.arch)
              end
            end
          end

          File.open(ENV["GITHUB_OUTPUT"], "a") do |f|
            f.puts "runners=#{runners.to_json}"
          end

  bottle:
    needs: prepare
    strategy:
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.runners) }}
      fail-fast: ${{inputs.fail-fast}}
    name: Build bottle on ${{ matrix.runner }}
    runs-on: ${{ matrix.runner }}
    container: ${{ matrix.container }}
    timeout-minutes: ${{ fromJson(inputs.timeout) }}
    permissions:
      actions: read
      checks: read
      contents: read
      packages: read
      pull-requests: read
    defaults:
      run:
        shell: /bin/bash -xeuo pipefail {0}
        working-directory: ${{matrix.workdir || github.workspace}}
    env:
      HOMEBREW_GITHUB_API_TOKEN: ${{ github.token }}
      BOTTLES_DIR: ${{ matrix.workdir || github.workspace }}/bottles
    steps:
      - name: Pre-test steps
        uses: Homebrew/actions/pre-build@main
        with:
          bottles-directory: ${{ env.BOTTLES_DIR }}
          cleanup: ${{ matrix.cleanup }}

      - name: Run brew test-bot
        working-directory: ${{ env.BOTTLES_DIR }}
        run: |
          HOMEBREW_DOCKER_REGISTRY_TOKEN=$(echo -n "${TOKEN}" | base64 | tr -d '\n')
          echo "::add-mask::${HOMEBREW_DOCKER_REGISTRY_TOKEN}"
          export HOMEBREW_DOCKER_REGISTRY_TOKEN
          brew test-bot \
            --only-formulae \
            --root-url="https://ghcr.io/v2/zhongruoyu/zhongruoyu-homebrew-test" \
            --only-json-tab \
            --skip-online-checks \
            --skip-dependents \
            "${DISPATCH_REBOTTLE_FORMULA}"
        env:
          TOKEN: ${{ github.token }}

      - name: Post-build steps
        if: always()
        uses: Homebrew/actions/post-build@main
        with:
          runner: ${{ matrix.runner }}
          cleanup: ${{ matrix.cleanup }}
          bottles-directory: ${{ env.BOTTLES_DIR }}
          logs-directory: ${{ env.BOTTLES_DIR }}/logs

  upload:
    permissions:
      actions: read
      checks: read
      contents: write
      issues: read
      packages: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs: bottle
    if: inputs.upload
    container:
      image: ghcr.io/homebrew/ubuntu22.04:main
    env:
      HOMEBREW_SIMULATE_MACOS_ON_LINUX: 1
      GH_REPO: ${{ github.repository }}
      GH_NO_UPDATE_NOTIFIER: 1
      GH_PROMPT_DISABLED: 1
      BOTTLE_BRANCH: ${{ github.actor }}/dispatch/${{ inputs.formula }}/${{ github.run_id }}
      BOTTLES_DIR: ${{ github.workspace }}/bottles
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@main
        with:
          core: true
          cask: false
          test-bot: false

      - name: Download bottles from GitHub Actions
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          pattern: bottles_*
          path: ${{ env.BOTTLES_DIR }}
          merge-multiple: true

      - name: Configure Git user
        uses: Homebrew/actions/git-user-config@main
        with:
          username: ${{ github.actor }}

      - name: Checkout branch for bottle commit
        working-directory: ${{ steps.set-up-homebrew.outputs.repository-path }}
        run: git checkout -b "$BOTTLE_BRANCH" origin/HEAD

      - name: Upload bottles to GitHub Packages
        id: upload
        env:
          HOMEBREW_GITHUB_PACKAGES_USER: ${{ github.repository_owner }}
          HOMEBREW_GITHUB_PACKAGES_TOKEN: ${{ github.token }}
          HOMEBREW_TAP_PATH: ${{ steps.set-up-homebrew.outputs.repository-path }}
        working-directory: ${{ env.BOTTLES_DIR }}
        run: |
          brew pr-upload \
            --verbose \
            --root-url="https://ghcr.io/v2/zhongruoyu/zhongruoyu-homebrew-test"
          echo "title=$(git -C "$HOMEBREW_TAP_PATH" log -1 --format='%s' "$BOTTLE_BRANCH")" >> "$GITHUB_OUTPUT"
          echo "head_sha=$(git -C "$HOMEBREW_TAP_PATH" rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Push commits
        uses: Homebrew/actions/git-try-push@main
        with:
          token: ${{ github.token }}
          directory: ${{ steps.set-up-homebrew.outputs.repository-path }}
          branch: ${{ env.BOTTLE_BRANCH }}

      - name: Open PR with bottle commit
        id: create-pr
        uses: Homebrew/actions/create-pull-request@main
        with:
          token: ${{ github.token }}
          base: ${{ github.ref }}
          head: ${{ env.BOTTLE_BRANCH }}
          title: ${{ steps.upload.outputs.title }}
          body: |
            Created by [`dispatch-rebottle.yml`](${{ env.RUN_URL }})

            -----

            ${{ env.DISPATCH_REBOTTLE_REASON }}
          reviewers: ${{ github.actor }}

      - name: Merge PR
        working-directory: ${{ steps.set-up-homebrew.outputs.repository-path }}
        env:
          GH_TOKEN: ${{ github.token }}
          EXPECTED_SHA: ${{ steps.upload.outputs.head_sha }}
        run: |
          gh pr merge \
            --delete-branch \
            --match-head-commit="$EXPECTED_SHA" \
            --merge \
            "$PR"

  comment:
    permissions:
      issues: write
      pull-requests: write
    needs: [bottle, upload]
    if: failure() && inputs.issue > 0
    runs-on: ubuntu-latest
    steps:
      - name: Post comment on failure
        uses: Homebrew/actions/post-comment@main
        with:
          token: ${{ github.token }}
          issue: ${{ inputs.issue }}
          body: ":x: @${{ github.actor }} bottle request for ${{ inputs.formula }} [failed](${{ env.RUN_URL }})."
          bot_body: ":x: Bottle request for ${{ inputs.formula }} [failed](${{ env.RUN_URL }})."
          bot: github-actions[bot]
